Project 4 Report
        The primary obstacle I had was implementing the “subsequence” function. No matter what, I had to deal with some form of nested loops, and I kept not accounting for some parts of the arrays. I overcame this hurdle by completing the “locateAny” function first, and then using my solution for that function to solve “subsequence”. For my brain, “locateAny” was significantly more manageable, so I could use it as a stepping stone, focusing on fewer parts of the problem. Something I would improve for next time is writing more test cases before implementing code. While in coding, I normally think of one or two edge cases, but there is almost always some less obvious case that will not be apparent while not fully focused on different scenarios.


reduplicate Test Cases
reduplicate(b,5); // where b is {“&*(&”, “  “, “”, “182”, “ooo”} works with a valid array no matter the contents of the reasonable string
reduplicate(b,-48); //negative array size 
reduplicate(b,0); //nothing is altered but no error thrown

locate Test Cases
locate(b,3,”&*(&”) // where b is {“&*(&”, “  “, “”, “182”, “ooo”} when the target is element 0
locate(b,3,”ooo”) //target is the last element
locate(b,2, “”) //target is in array but not in scope of n
locate(a,0, “hi”); //where a is 1 empty string and the target is not empty tests empty string case
locate(a,-48, “0”); //negative array size


locationOfMax Test Cases
locationOfMax(a,0); //returns a negative one when no values are analyzed
locationOfMax(b,5); // b is{“1”, “2”, “3”, “4”, “5”}updates max when each element is a new max and max is the last value
locationOfMax(b,5); // b is{“1”, “-2”, “-3”, “-*”, “-(”}works when the first value is max and works when all elements have common first characters
locationOfMax(c,5); // c is{“1”, “2”, “3”, “4”, “5”, “6”, “7”} max only accounts for first 5 of 7
locationOfMax(d,5); // d is{“0”, “0”} returns 1st index where max was found


circleLeft Test Cases
circleLeft(a, 5, 30); //position out of bounds in the positive direction assumes n is < 30
circleLeft(a, 5, -1);//position out of bounds in the negative direction
circleLeft(a, -1, 3);//invalid n value
circleLeft(a, 3, 0);//where a is {“hi”, “there”,” sir”} pos is the first index
circleLeft(a, 3, 2);//where a is {“hi”, “there”,” sir”} pos is the last index(do nothing)
circleLeft(b, 1, 0);//where b is {“hi”} circling a single string
circleLeft(c, 2, 0);//where c is {“  ”, “hi”} circling only two strings(essentially just swapping)


enumerateRuns Test Cases
enumerateRuns(a,-10); // invalid n
enumerateRuns(a, 0); // ensure counter doesn’t return 1 when 0 elements looked at
enumerateRuns(a, 5); // where a is {“ah”, “ah”, “ah”, “ah, “ah”} only one run
enumerateRuns(b, 3); // where b is {“ah”, “ah”, “ah”, “wow”, “wow”} run outside n
enumerateRuns(c, 5); // where c is {“ah”, “wow”, “ah”, “wow”, “ah”} new run with previous run’s content and run changes at index 0 and n-1


flip Test Cases
flip(a,0); //no indexes changed
flip(a,-1); //invalid n
flip(a,1); //where a is {“no flip”}, tests flipping onto self
flip(b,5); //where b is {“ah”, “ahh”, “w”, “wo”, “wow”}, odd number flipped
flip(b,4); //where b is {“ah”, “ahh”, “w”, “wo”}, even number flipped


locateDifference Test Cases
locateDifference(a, 5, b, 3); //a is {“hi”, “hi”, “hi”, “bye”, “bye”} b is {“hi”, “hi”, “hi”}, extra characters after matching strings, n2 caused loop break
locateDifference(b,2,a,5); //n1 caused loop break
locateDifference(c, 5, d, 3); //c is {“hi”, “hi”, “hI”, “bye”, “bye”} d is {“hi”, “hi”, “Hi”},  difference located at end of shorter length
locateDifference(e, 5, f, 3); //e is {“Hi”, “hi”, “hI”, “bye”, “bye”} f is {“hI”, “hi”, “Hi”},  return location of FIRST difference & difference located at index 0
locateDifference(a,-1,b,0); // n1 out of bounds
locateDifference(a,0,b,-1); // n2 out of bounds
locateDifference(a,2,b,0); // returns 0 as no elements looked at


subsequence Test Cases
string things[8] = { "hi", "pig", "old", "john", "scar", };
string things1[8] = { "old", "john", "scar" };
subsequence(things, 5, things1, 3);   //catches subsequence at end of a1
string things[8] = { "old", "john", "scar", "john", "scar", };
string things1[8] = { "old", "john", "scar" };
subsequence(things, 5, things1, 3);   //catches subsequence at beginning of a1
string things[8] = { "hi", "pig", "scar", "old", "john", };
string things1[8] = { "old", "john", "scar" };
subsequence(things, 5, things1, 3);   //does not go out of bounds when matching string runs off
subsequence(things, 0, things1, 3); //correctly deals with 0 n1 value
subsequence(things, 5, things1, 0); //correctly deals with an empty string to find
subsequence(things, -1, things1, -1); //invalid n1/n2 input


locateAny Test Cases
string things[8] = { "scar", "pig", "old", "john", "scar", };
string things1[8] = { "old", "john", "scar" };
locateAny(things, 5, things1, 3);   //min location contains string other than first string in n2
locateAny(things, 0, things1, 3); // empty array to go through
locateAny(things, 3, things1, 0); // no elements to locate
string things[8] = { "scar", "pig", "old", "john", "scar", };
string things1[8] = { "chun" };
locateAny(things, 5, things1, 1); //no a2 strings found


divide Test Cases
string things[8] = { "scar", "pig", "old", "john", "scab", };
divide(things, 3, “scab”); //organizes first three elements
divide(things, 5, “zzzz”); //doesn't return premature value
divide(things, 0, “zzzz”); //elements are unchanged and n is returned
divide(thing, 5, “aaaa”); //returns correct value when all strings come after